---
- name: Add Prometheus Community Helm repository
  kubernetes.core.helm_repository:
    name: prometheus-community
    repo_url: https://prometheus-community.github.io/helm-charts
    kubeconfig: "{{ kubeconfig_path }}"
  retries: "{{ helm_retries }}"
  delay: 10
  tags: [monitoring, helm-repos]

- name: Create monitoring namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    name: "{{ prometheus_stack_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  tags: [monitoring, namespace]

- name: Deploy Prometheus Stack (kube-prometheus-stack)
  kubernetes.core.helm:
    name: "{{ prometheus_stack_name }}"
    chart_ref: "{{ prometheus_stack_chart_ref }}"
    release_namespace: "{{ prometheus_stack_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
    values:
      # Grafana Configuration
      grafana:
        service:
          type: NodePort
          nodePort: "{{ grafana_nodeport }}"
        adminPassword: "{{ grafana_admin_password }}"
        resources:
          requests:
            memory: "{{ grafana_memory_request }}"
            cpu: "{{ grafana_cpu_request }}"
          limits:
            memory: "{{ grafana_memory_limit }}"
            cpu: "{{ grafana_cpu_limit }}"
        persistence:
          enabled: true
          storageClassName: "{{ prometheus_storage_class }}"
          size: 1Gi
        
      # Prometheus Configuration
      prometheus:
        service:
          type: NodePort
          nodePort: "{{ prometheus_nodeport }}"
        prometheusSpec:
          serviceMonitorSelectorNilUsesHelmValues: false
          replicas: 1
          resources:
            requests:
              memory: "{{ prometheus_memory_request }}"
              cpu: "{{ prometheus_cpu_request }}"
            limits:
              memory: "{{ prometheus_memory_limit }}"
              cpu: "{{ prometheus_cpu_limit }}"
          storageSpec:
            volumeClaimTemplate:
              spec:
                storageClassName: "{{ prometheus_storage_class }}"
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: "{{ prometheus_storage_size }}"
          retention: 30d

      # Prometheus Pushgateway Configuration
      prometheus-pushgateway:
        enabled: true
        service:
          type: NodePort
          nodePort: "{{ pushgateway_nodeport | default(32091) }}"
        resources:
          requests:
            memory: "{{ pushgateway_memory_request | default('128Mi') }}"
            cpu: "{{ pushgateway_cpu_request | default('100m') }}"
          limits:
            memory: "{{ pushgateway_memory_limit | default('512Mi') }}"
            cpu: "{{ pushgateway_cpu_limit | default('500m') }}"
        persistence:
          enabled: true
          storageClassName: "{{ prometheus_storage_class }}"
          size: "{{ pushgateway_storage_size | default('1Gi') }}"
        serviceMonitor:
          enabled: true
          namespace: "{{ prometheus_stack_namespace }}"
      
      # AlertManager Configuration
      alertmanager:
        alertmanagerSpec:
          storage:
            volumeClaimTemplate:
              spec:
                storageClassName: "{{ prometheus_storage_class }}"
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 2Gi
        
      # Disable K3s incompatible components
      kubeControllerManager:
        enabled: false
      kubeEtcd:
        enabled: false  
      kubeScheduler:
        enabled: false
      kubeProxy:
        enabled: false

  register: prometheus_deployment
  retries: "{{ helm_retries }}"
  delay: "{{ helm_retry_delay }}"
  tags: [monitoring, prometheus, helm-deploy]

- name: Verify Prometheus Stack deployment
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: apps/v1
    kind: Deployment
    namespace: "{{ prometheus_stack_namespace }}"
    label_selectors:
      - "app.kubernetes.io/name=grafana"
  register: grafana_deployment
  until: 
    - grafana_deployment.resources | length > 0
    - grafana_deployment.resources[0].status.readyReplicas | default(0) > 0
  retries: 30
  delay: 10
  tags: [monitoring, verify]

- name: Create Grafana LoadBalancer service (when MetalLB enabled)
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: grafana
        namespace: "{{ prometheus_stack_namespace }}"
        labels:
          app.kubernetes.io/name: grafana
        annotations:
          metallb.universe.tf/loadBalancerIPs: "192.168.1.207"
      spec:
        type: LoadBalancer
        ports:
        - port: 80
          targetPort: 3000
          protocol: TCP
          name: http
        selector:
          app.kubernetes.io/name: grafana
  when: metallb_state is defined and metallb_state == 'present'
  tags: [monitoring, grafana, loadbalancer]

- name: Display Prometheus Stack deployment status
  debug:
    msg:
      - "🎉 Prometheus Stack deployment completed successfully!"
      - "📊 Grafana Dashboard (NodePort): http://{{ ansible_host | default('192.168.1.85') }}:{{ grafana_nodeport }}"
      - "📊 Grafana Dashboard (LoadBalancer): http://192.168.1.207 (when MetalLB enabled)"
      - "🔍 Prometheus UI: http://{{ ansible_host | default('192.168.1.85') }}:{{ prometheus_nodeport }}"
      - "📤 Pushgateway: http://{{ ansible_host | default('192.168.1.85') }}:{{ pushgateway_nodeport | default(32091) }}"
      - "🔑 Grafana Credentials: admin / {{ grafana_admin_password }}"
      - "📈 Namespace: {{ prometheus_stack_namespace }}"
  tags: [monitoring, summary]

- name: Create Prometheus ServiceMonitor for MLflow (if MLflow is deployed)
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: ServiceMonitor
      metadata:
        name: mlflow-metrics
        namespace: "{{ prometheus_stack_namespace }}"
        labels:
          app: mlflow
      spec:
        selector:
          matchLabels:
            app: mlflow
        endpoints:
        - port: http
          path: /metrics
          interval: 30s
  failed_when: false  # Don't fail if MLflow isn't deployed yet
  tags: [monitoring, servicemonitor, mlflow]
