---
- name: Add Seldon Helm repository
  kubernetes.core.helm_repository:
    name: seldon-charts
    repo_url: https://seldonio.github.io/helm-charts/
    kubeconfig: "{{ kubeconfig_path }}"
  retries: 3
  delay: 10
  tags: [platform, seldon, seldon-system, helm-repos]

- name: Create Seldon namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    name: "{{ seldon_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  tags: [platform, seldon, seldon-system, namespace]

- name: Create Harbor registry secret for Seldon namespace
  shell: |
    kubectl create secret docker-registry harbor-registry-secret \
      --docker-server=192.168.1.210 \
      --docker-username=admin \
      --docker-password="{{ harbor_admin_password | default('Harbor12345') }}" \
      --docker-email=admin@harbor.local \
      --namespace="{{ seldon_namespace }}" \
      --dry-run=client -o yaml | kubectl apply -f -
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: 
    - seldon_use_custom_controller | default(false) or seldon_use_custom_scheduler | default(false)
  tags: [platform, seldon, seldon-system, secrets]

- name: Verify Harbor registry secret exists
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: v1
    kind: Secret
    name: harbor-registry-secret
    namespace: "{{ seldon_namespace }}"
  register: harbor_secret_check
  failed_when: harbor_secret_check.resources | length == 0
  when: 
    - seldon_use_custom_controller | default(false) or seldon_use_custom_scheduler | default(false)
  tags: [platform, seldon, seldon-system, secrets]

- name: Ensure kube-system namespace has required labels for network policies
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: v1
    kind: Namespace
    name: kube-system
    merge_type: merge
    definition:
      metadata:
        labels:
          name: kube-system
  tags: [platform, seldon, seldon-system, namespace, network-policy]

- name: Label seldon-system namespace for network policies
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: v1
    kind: Namespace
    name: "{{ seldon_namespace }}"
    merge_type: merge
    definition:
      metadata:
        labels:
          name: "{{ seldon_namespace }}"
  tags: [platform, seldon, seldon-system, namespace, network-policy]

- name: Install Seldon Core V2 CRDs
  kubernetes.core.helm:
    name: seldon-core-v2-crds
    chart_ref: "{{ seldon_crds_chart_ref }}"
    chart_version: "{{ seldon_crds_chart_version }}"
    release_namespace: "{{ seldon_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
  tags: [platform, seldon, seldon-system, crds]

- name: Install Seldon Core V2 Runtime
  kubernetes.core.helm:
    name: seldon-core-v2-runtime
    chart_ref: "{{ seldon_runtime_chart_ref }}"
    chart_version: "{{ seldon_runtime_chart_version }}"
    release_namespace: "{{ seldon_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
    values:
      # Runtime configuration (no controller settings here)
      controllerManager:
        image:
          tag: "{{ seldon_operator_image_tag }}"
        resources:
          requests:
            cpu: "{{ seldon_manager_cpu_request }}"
            memory: "{{ seldon_manager_memory_request }}"
          limits:
            cpu: "{{ seldon_manager_cpu_limit }}"
            memory: "{{ seldon_manager_memory_limit }}"
      istio:
        enabled: true
        gateway: "istio-system/istio-ingressgateway"
        tls:
          enabled: true
          mode: STRICT
      meshGateway:
        enabled: true
        replicas: 1
        service:
          enabled: true
          type: ClusterIP
  register: seldon_deployment
  retries: "{{ helm_retries }}"
  delay: "{{ helm_retry_delay }}"
  tags: [platform, seldon, seldon-system, helm-deploy]

- name: Install Seldon Core V2 servers
  kubernetes.core.helm:
    name: seldon-core-v2-servers
    chart_ref: "{{ seldon_servers_chart_ref }}"
    chart_version: "{{ seldon_servers_chart_version }}"
    release_namespace: "{{ seldon_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
  tags: [platform, seldon, seldon-system]

- name: Create watched namespaces for Seldon controller
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: v1
    kind: Namespace
    name: "{{ item }}"
    state: present
    definition:
      metadata:
        labels:
          name: "{{ item }}"
          seldon.io/managed: "true"
  loop: "{{ seldon_watch_namespaces | default(['financial-mlops-pytorch', 'financial-inference']) }}"
  tags: [platform, seldon, namespace, scoped-operator]

- name: Build base Seldon setup values
  set_fact:
    seldon_base_values:
      controller:
        clusterwide: false  # Use namespace-scoped watching (Scoped Operator Pattern)
        watchNamespaces: "{{ seldon_watch_namespaces | default(['financial-mlops-pytorch', 'financial-inference']) }}"
      webhook:
        enabled: true
        port: 443
      controllerManager:
        webhookPort: 443
        env:
          SELDON_SCHEDULER_HOST: seldon-scheduler
          SELDON_SCHEDULER_PORT: "9004"
        resources:
          requests:
            cpu: "{{ seldon_manager_cpu_request }}"
            memory: "{{ seldon_manager_memory_request }}"
          limits:
            cpu: "{{ seldon_manager_cpu_limit }}"
            memory: "{{ seldon_manager_memory_limit }}"
  tags: [platform, seldon, seldon-system, helm-deploy]

- name: Add custom scheduler image if enabled
  set_fact:
    seldon_base_values: >-
      {{ seldon_base_values | combine({
        'scheduler': {
          'image': {
            'registry': '192.168.1.210',
            'repository': 'library/seldon-scheduler',
            'tag': seldon_scheduler_tag
          }
        }
      }, recursive=True) }}
  when: 
    - seldon_use_custom_scheduler | default(false)
    - seldon_scheduler_tag is defined
  tags: [platform, seldon, seldon-system, helm-deploy]

- name: Parse controller image components
  set_fact:
    controller_image_parts: "{{ seldon_controller_full_image.split(':') }}"
    controller_repo_parts: "{{ seldon_controller_full_image.split(':')[0].split('/') }}"
  when:
    - seldon_use_custom_controller | default(false)
    - seldon_controller_full_image is defined
  tags: [platform, seldon, seldon-system, helm-deploy]

- name: Add custom controller image if enabled
  set_fact:
    seldon_base_values: >-
      {{ seldon_base_values | combine({
        'controller': {
          'image': {
            'registry': controller_repo_parts[0],
            'repository': (controller_repo_parts[1:] | join('/')),
            'tag': controller_image_parts[1]
          }
        }
      }, recursive=True) }}
  when:
    - seldon_use_custom_controller | default(false)
    - seldon_controller_full_image is defined
  tags: [platform, seldon, seldon-system, helm-deploy]

- name: Add Harbor registry image pull secrets when using custom images
  set_fact:
    seldon_base_values: >-
      {{ seldon_base_values | combine({
        'imagePullSecrets': [{'name': 'harbor-registry-secret'}]
      }, recursive=True) }}
  when: 
    - seldon_use_custom_controller | default(false) or seldon_use_custom_scheduler | default(false) 
    - harbor_integrate_with_seldon | default(true)
  tags: [platform, seldon, seldon-system, helm-deploy]

- name: Install Seldon Core V2 setup
  kubernetes.core.helm:
    name: seldon-core-v2-setup
    chart_ref: "{{ seldon_setup_chart_ref }}"
    chart_version: "{{ seldon_setup_chart_version }}"
    release_namespace: "{{ seldon_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
    values: "{{ seldon_base_values }}"
  register: seldon_setup_deployment
  retries: "{{ helm_retries }}"
  delay: "{{ helm_retry_delay }}"
  tags: [platform, seldon, seldon-system, helm-deploy]

- name: Wait for Seldon Core to be ready
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: apps/v1
    kind: Deployment
    name: seldon-v2-controller-manager
    namespace: "{{ seldon_namespace }}"
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300
  tags: [platform, seldon, seldon-system, verify]

- name: Create Seldon configuration ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: seldon-config
        namespace: "{{ seldon_namespace }}"
      data:
        predictor_servers: "{{ seldon_predictor_servers | to_nice_json }}"
  tags: [platform, seldon, seldon-system, config]

# FIXED: Remove the conflicting NodePort service creation
# The Seldon operator will create its own services

- name: Create Sample Seldon Deployment Template
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: seldon-examples
        namespace: "{{ seldon_namespace }}"
      data:
        iris-model.yaml: |
          apiVersion: machinelearning.seldon.io/v1
          kind: SeldonDeployment
          metadata:
            name: iris-model
            namespace: seldon-system
          spec:
            name: iris
            predictors:
            - graph:
                children: []
                implementation: SKLEARN_SERVER
                modelUri: gs://seldon-models/sklearn/iris
                name: classifier
              name: default
              replicas: 1
              componentSpecs:
              - spec:
                  containers:
                  - name: classifier
                    resources:
                      requests:
                        memory: 1Mi
                        cpu: 50m
                      limits:
                        memory: 1000Mi
                        cpu: 1000m
        
        mlflow-model.yaml: |
          apiVersion: machinelearning.seldon.io/v1
          kind: SeldonDeployment
          metadata:
            name: mlflow-model
            namespace: seldon-system
          spec:
            name: mlflow-model
            predictors:
            - graph:
                children: []
                implementation: MLFLOW_SERVER
                modelUri: http://mlflow.mlflow.svc.cluster.local:5000/get-artifact?path=model&run_uuid=YOUR_RUN_ID
                name: mlflow-model
                envSecretRefName: mlflow-secret
              name: default
              replicas: 1
              componentSpecs:
              - spec:
                  containers:
                  - name: mlflow-model
                    resources:
                      requests:
                        memory: 100Mi
                        cpu: 100m
                      limits:
                        memory: 1Gi
                        cpu: 1000m
  tags: [platform, seldon, seldon-system, examples]

- name: Display Seldon Core deployment status
  debug:
    msg:
      - "🎉 Seldon Core v2.9.1 deployment completed successfully!"
      - "🤖 Model Serving Platform Ready (Scoped Operator Pattern)"
      - "📁 Control Namespace: {{ seldon_namespace }}"
      - "🔧 Controller: seldon-v2-controller-manager"
      - "{% if seldon_use_custom_controller | default(false) and seldon_controller_full_image is defined %}🐳 Custom Controller: {{ seldon_controller_full_image }}{% endif %}"
      - "{% if seldon_use_custom_scheduler | default(false) and seldon_scheduler_full_image is defined %}📅 Custom Scheduler: {{ seldon_scheduler_full_image }}{% endif %}"
      - "👀 Watched Namespaces: {{ seldon_watch_namespaces | default(['financial-mlops-pytorch', 'financial-inference']) | join(', ') }}"
      - ""
      - "🚀 Supported Model Types:"
      - "- MLServer (PyTorch, SKLearn, XGBoost, MLflow)"
      - "- Triton (TensorFlow, PyTorch, ONNX)"
      - "- Custom Docker Images"
      - ""
      - "📖 Scoped Operator Pattern:"
      - "- Controller watches specific namespaces only"
      - "- Multi-tenant isolation with namespace boundaries"
      - "- Teams deploy ServerConfig and Models in their own namespaces"
      - "- Centralized scheduler coordination in seldon-system"
      - ""
      - "💡 Quick Commands:"
      - "- kubectl get serverconfigs -n {{ seldon_namespace }}"
      - "- kubectl get servers,models -A"
      - "- kubectl get experiments -A"
  tags: [platform, seldon, seldon-system, summary]

# Add infrastructure-level registry access
- name: Create container registry pull secret for Seldon platform
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: ghcr-pull-secret
        namespace: "{{ seldon_namespace }}"
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: "{{ ghcr_docker_config | b64encode }}"
  when: ghcr_docker_config is defined
  tags: [platform, seldon, seldon-system, secrets]

- name: Create base ClusterRole for Seldon deployments
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: seldon-deployment-manager
      rules:
      - apiGroups: ["machinelearning.seldon.io"]
        resources: ["seldondeployments", "seldondeployments/finalizers"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: [""]
        resources: ["services", "endpoints"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["apps"]
        resources: ["deployments"]
        verbs: ["get", "list", "watch"]
  tags: [platform, seldon, seldon-system, rbac]

- name: Create ClusterRoleBinding for default service account
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: seldon-deployment-manager-binding
      subjects:
      - kind: ServiceAccount
        name: default
        namespace: "{{ seldon_namespace }}"
      roleRef:
        kind: ClusterRole
        name: seldon-deployment-manager
        apiGroup: rbac.authorization.k8s.io
  tags: [platform, seldon, seldon-system, seldon, rbac]

# Custom Agent Configuration (Optional - for testing/development)
- name: Patch ServerConfig with custom agent image
  shell: |
    kubectl patch serverconfig mlserver -n {{ seldon_namespace }} --type='json' -p='[
      {"op": "replace", "path": "/spec/podSpec/containers/1/image", "value": "{{ seldon_custom_images.registry }}/{{ seldon_custom_images.agent.repository }}:{{ seldon_custom_images.agent.tag }}"},
      {"op": "replace", "path": "/spec/podSpec/containers/1/imagePullPolicy", "value": "{{ seldon_custom_images.agent.pullPolicy }}"}
    ]'
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  when: 
    - seldon_custom_images is defined
    - seldon_custom_images.enabled | default(false)
    - seldon_custom_images.agent is defined
  tags: [platform, seldon, seldon-system, seldon-custom]

- name: Restart mlserver StatefulSet to apply custom agent
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: absent
    api_version: v1
    kind: Pod
    name: mlserver-0
    namespace: "{{ seldon_namespace }}"
    wait: true
    wait_timeout: 60
  when: 
    - seldon_custom_images is defined
    - seldon_custom_images.enabled | default(false)
    - seldon_custom_images.agent is defined
  tags: [platform, seldon, seldon-system, seldon-custom]
  failed_when: false