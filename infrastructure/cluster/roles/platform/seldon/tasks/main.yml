---
- name: Add Seldon Helm repository
  kubernetes.core.helm_repository:
    name: seldon-charts
    repo_url: https://seldonio.github.io/helm-charts/
    kubeconfig: "{{ kubeconfig_path }}"
  retries: 3
  delay: 10
  tags: [platform, seldon, seldon-system, helm-repos]

- name: Create Seldon namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    name: "{{ seldon_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  tags: [platform, seldon, seldon-system, namespace]

- name: Install Seldon Core V2 CRDs
  kubernetes.core.helm:
    name: seldon-core-v2-crds
    chart_ref: "{{ seldon_crds_chart_ref }}"
    chart_version: "{{ seldon_crds_chart_version }}"
    release_namespace: "{{ seldon_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
  tags: [platform, seldon, seldon-system, crds]

- name: Install Seldon Core V2 Runtime
  kubernetes.core.helm:
    name: seldon-core-v2-runtime
    chart_ref: "{{ seldon_runtime_chart_ref }}"
    chart_version: "{{ seldon_runtime_chart_version }}"
    release_namespace: "{{ seldon_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
    values:
      # Runtime configuration (no controller settings here)
      controllerManager:
        image:
          tag: "{{ seldon_operator_image_tag }}"
        resources:
          requests:
            cpu: "{{ seldon_manager_cpu_request }}"
            memory: "{{ seldon_manager_memory_request }}"
          limits:
            cpu: "{{ seldon_manager_cpu_limit }}"
            memory: "{{ seldon_manager_memory_limit }}"
      istio:
        enabled: true
        gateway: "istio-system/istio-ingressgateway"
        tls:
          enabled: true
          mode: STRICT
      meshGateway:
        enabled: true
        replicas: 1
        service:
          enabled: true
          type: ClusterIP
  register: seldon_deployment
  retries: "{{ helm_retries }}"
  delay: "{{ helm_retry_delay }}"
  tags: [platform, seldon, seldon-system, helm-deploy]

- name: Install Seldon Core V2 servers
  kubernetes.core.helm:
    name: seldon-core-v2-servers
    chart_ref: "{{ seldon_servers_chart_ref }}"
    chart_version: "{{ seldon_servers_chart_version }}"
    release_namespace: "{{ seldon_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
  tags: [platform, seldon, seldon-system]

- name: Install Seldon Core V2 setup
  kubernetes.core.helm:
    name: seldon-core-v2-setup
    chart_ref: "{{ seldon_setup_chart_ref }}"
    chart_version: "{{ seldon_setup_chart_version }}"
    release_namespace: "{{ seldon_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
    values:
      # IMPORTANT: Controller configuration belongs in the SETUP chart, not runtime chart
      # The setup chart installs the actual controller deployment
      controller:
        clusterwide: true  # Enable cluster-wide model watching across all namespaces
      webhook:
        enabled: true
        port: 443
      controllerManager:
        webhookPort: 443
        resources:
          requests:
            cpu: "{{ seldon_manager_cpu_request }}"
            memory: "{{ seldon_manager_memory_request }}"
          limits:
            cpu: "{{ seldon_manager_cpu_limit }}"
            memory: "{{ seldon_manager_memory_limit }}"
  register: seldon_setup_deployment
  retries: "{{ helm_retries }}"
  delay: "{{ helm_retry_delay }}"
  tags: [platform, seldon, seldon-system, helm-deploy]

- name: Wait for Seldon Core to be ready
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: apps/v1
    kind: Deployment
    name: seldon-controller-manager
    namespace: "{{ seldon_namespace }}"
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300
  tags: [platform, seldon, seldon-system, verify]

# FIXED: Remove the conflicting NodePort service creation
# The Seldon operator will create its own services

- name: Create Sample Seldon Deployment Template
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: seldon-examples
        namespace: "{{ seldon_namespace }}"
      data:
        iris-model.yaml: |
          apiVersion: machinelearning.seldon.io/v1
          kind: SeldonDeployment
          metadata:
            name: iris-model
            namespace: seldon-system
          spec:
            name: iris
            predictors:
            - graph:
                children: []
                implementation: SKLEARN_SERVER
                modelUri: gs://seldon-models/sklearn/iris
                name: classifier
              name: default
              replicas: 1
              componentSpecs:
              - spec:
                  containers:
                  - name: classifier
                    resources:
                      requests:
                        memory: 1Mi
                        cpu: 50m
                      limits:
                        memory: 1000Mi
                        cpu: 1000m
        
        mlflow-model.yaml: |
          apiVersion: machinelearning.seldon.io/v1
          kind: SeldonDeployment
          metadata:
            name: mlflow-model
            namespace: seldon-system
          spec:
            name: mlflow-model
            predictors:
            - graph:
                children: []
                implementation: MLFLOW_SERVER
                modelUri: http://mlflow.mlflow.svc.cluster.local:5000/get-artifact?path=model&run_uuid=YOUR_RUN_ID
                name: mlflow-model
                envSecretRefName: mlflow-secret
              name: default
              replicas: 1
              componentSpecs:
              - spec:
                  containers:
                  - name: mlflow-model
                    resources:
                      requests:
                        memory: 100Mi
                        cpu: 100m
                      limits:
                        memory: 1Gi
                        cpu: 1000m
  tags: [platform, seldon, seldon-system, examples]

- name: Display Seldon Core deployment status
  debug:
    msg:
      - "üéâ Seldon Core deployment completed successfully!"
      - "ü§ñ Model Serving Platform Ready!"
      - "üìÅ Namespace: {{ seldon_namespace }}"
      - "üîß Operator: seldon-controller-manager"
      - ""
      - "üöÄ Supported Model Types:"
      - "- Scikit-Learn (SKLEARN_SERVER)"
      - "- MLflow (MLFLOW_SERVER)"
      - "- Custom Docker Images"
      - "- TensorFlow, PyTorch, XGBoost"
      - ""
      - "üìñ Sample Deployments Available:"
      - "- kubectl get configmap seldon-examples -n {{ seldon_namespace }} -o yaml"
      - ""
      - "üí° Quick Commands:"
      - "- kubectl get seldondeployments -n {{ seldon_namespace }}"
      - "- kubectl apply -f <your-model.yaml>"
  tags: [platform, seldon, seldon-system, summary]

# Add infrastructure-level registry access
- name: Create container registry pull secret for Seldon platform
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: ghcr-pull-secret
        namespace: "{{ seldon_namespace }}"
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: "{{ ghcr_docker_config | b64encode }}"
  when: ghcr_docker_config is defined
  tags: [platform, seldon, seldon-system, secrets]

- name: Create base ClusterRole for Seldon deployments
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: seldon-deployment-manager
      rules:
      - apiGroups: ["machinelearning.seldon.io"]
        resources: ["seldondeployments", "seldondeployments/finalizers"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: [""]
        resources: ["services", "endpoints"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["apps"]
        resources: ["deployments"]
        verbs: ["get", "list", "watch"]
  tags: [platform, seldon, seldon-system, rbac]

- name: Create ClusterRoleBinding for default service account
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: seldon-deployment-manager-binding
      subjects:
      - kind: ServiceAccount
        name: default
        namespace: "{{ seldon_namespace }}"
      roleRef:
        kind: ClusterRole
        name: seldon-deployment-manager
        apiGroup: rbac.authorization.k8s.io
  tags: [platform, seldon, seldon-system, seldon, rbac]