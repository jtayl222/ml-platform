---
- name: Check if Kiali is already installed
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: kiali
    namespace: "{{ kiali_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
  register: kiali_deployment
  failed_when: false

- name: Deploy Kiali using istioctl addon
  command: >
    kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-{{ istio_version.split('.')[0] }}.{{ istio_version.split('.')[1] }}/samples/addons/kiali.yaml
    --kubeconfig {{ kubeconfig_path }}
  when: kiali_deployment.resources | length == 0

- name: Patch Kiali service based on MetalLB availability
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Service
    name: kiali
    namespace: "{{ kiali_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      spec:
        type: "{{ 'LoadBalancer' if (metallb_state | default('absent')) == 'present' else 'NodePort' }}"
        ports:
        - name: http
          port: 20001
          targetPort: 20001
          nodePort: "{{ 32001 if (metallb_state | default('absent')) != 'present' else omit }}"
  when: (metallb_state | default('absent')) == 'present' or true

- name: Configure LoadBalancer IP for Kiali (if MetalLB enabled)
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Service
    name: kiali
    namespace: "{{ kiali_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      metadata:
        annotations:
          metallb.universe.tf/loadBalancerIPs: "192.168.1.211"
      spec:
        type: LoadBalancer
  when: (metallb_state | default('absent')) == 'present'

- name: Create Kiali configuration
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: kiali
        namespace: "{{ kiali_namespace }}"
      data:
        config.yaml: |
          auth:
            strategy: anonymous
          deployment:
            accessible_namespaces:
            - "**"
          external_services:
            prometheus:
              url: "http://prometheus-server.monitoring:9090"
            grafana:
              url: "http://grafana.monitoring:3000"
              dashboards:
              - name: "Istio Service Dashboard"
                variables:
                  namespace: "var-namespace"
                  service: "var-service"
              - name: "Istio Workload Dashboard"
                variables:
                  namespace: "var-namespace"
                  workload: "var-workload"
          server:
            web_root: /kiali
    kubeconfig: "{{ kubeconfig_path }}"

- name: Wait for Kiali to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: kiali
    namespace: "{{ kiali_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300

- name: Get Kiali service information
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: kiali
    namespace: "{{ kiali_namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
  register: kiali_service

- name: Display Kiali access information
  debug:
    msg:
      - "Kiali has been deployed successfully!"
      - "Access Kiali at:"
      - "{{ 'LoadBalancer: http://192.168.1.211:20001' if (metallb_state | default('absent')) == 'present' else 'NodePort: http://' + control_plane_ip + ':32001' }}"
      - "Authentication: Anonymous (no login required)"