---
- name: Add Argo Helm repository
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm
    kubeconfig: "{{ kubeconfig_path }}"
  retries: 3
  delay: 10
  tags: [platform, helm-repos]

- name: Ensure Argo Workflows namespace exists
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    name: "{{ argowf_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  tags: [platform, workflows, namespace]

- name: Ensure Argo Workflows MinIO credentials sealed secret is applied
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    src: "{{ playbook_dir }}/../manifests/sealed-secrets/argowf/ml-platform-sealed-secret.yaml"
    state: present
    namespace: "{{ argowf_namespace }}" # Explicitly state namespace, though manifest should have it
  register: argowf_minio_secret_result
  retries: 3
  delay: 10
  tags: [platform, workflows, credentials]

- name: Verify Argo Workflows MinIO credentials secret is available
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: v1
    kind: Secret
    name: ml-platform # Verifying the secret for workflows
    namespace: "{{ argowf_namespace }}"
  register: argowf_minio_secret_check
  until: argowf_minio_secret_check.resources | length > 0
  retries: 12 # Increased retries for secret to be unsealed
  delay: 10
  tags: [platform, workflows, verify-credentials]

- name: Deploy Argo Workflows {{ argowf_app_version }}
  kubernetes.core.helm:
    name: "{{ argowf_name }}"
    chart_ref: "{{ argowf_chart_ref }}"
    chart_version: "{{ argowf_chart_version }}"
    release_namespace: "{{ argowf_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
    values:
      server:
        authModes: "{{ argowf_auth_modes }}"
        serviceType: "{{ argowf_service_type }}"
        serviceNodePort: "{{ argowf_service_nodeport }}"
        extraArgs:
          - --auth-mode=server
        secure: false
        rbac:
          create: true
        image:
          tag: "{{ argowf_app_version }}"
      controller:
        workflowNamespaces: "{{ argowf_workflow_namespaces }}"
        resources:
          requests:
            memory: "{{ argowf_memory_request }}"
            cpu: "{{ argowf_cpu_request }}"
          limits:
            memory: "{{ argowf_memory_limit }}"
            cpu: "{{ argowf_cpu_limit }}"
        image:
          tag: "{{ argowf_app_version }}"
        # ADD THIS CONFIGURATION FOR WORKFLOW DEFAULT NODE DISTRIBUTION
        config: |
          workflowDefaults: |
            spec:
              affinity:
                nodeAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 100
                    preference:
                      matchExpressions:
                      - key: node-role.kubernetes.io/worker
                        operator: Exists
              tolerations:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
                effect: NoSchedule
      executor:
        image:
          tag: "{{ argowf_app_version }}"
  register: argowf_deployment
  retries: "{{ helm_retries }}"
  delay: "{{ helm_retry_delay }}"
  tags: [platform, workflows, helm-deploy]

# ADD NEW TASK TO CONFIGURE WORKFLOW CONTROLLER AFTER DEPLOYMENT
- name: Configure Argo Workflows for distributed job scheduling
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: workflow-controller-configmap
        namespace: "{{ argowf_namespace }}"
      data:
        config: |
          workflowDefaults: |
            spec:
              affinity:
                nodeAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 100
                    preference:
                      matchExpressions:
                      - key: node-role.kubernetes.io/worker
                        operator: Exists
                  - weight: 50
                    preference:
                      matchExpressions:
                      - key: node-role.kubernetes.io/control-plane
                        operator: DoesNotExist
              tolerations:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
                effect: NoSchedule
    merge_type: strategic-merge
  tags: [platform, workflows, config]

- name: Restart Argo Workflows controller to apply new configuration
  ansible.builtin.command: >
    kubectl rollout restart deployment/{{ argowf_name }}-workflow-controller
    --namespace={{ argowf_namespace }}
    --kubeconfig={{ kubeconfig_path }}
  register: restart_result
  changed_when: "'restarted' in restart_result.stdout"
  tags: [platform, workflows, restart]

- name: Wait for controller restart to complete
  ansible.builtin.command: >
    kubectl rollout status deployment/{{ argowf_name }}-workflow-controller
    --namespace={{ argowf_namespace }}
    --kubeconfig={{ kubeconfig_path }}
    --timeout=300s
  register: rollout_status
  changed_when: false
  tags: [platform, workflows, restart]

- name: Wait for Argo Workflows server to be ready
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: apps/v1
    kind: Deployment
    name: "{{ argowf_name }}-server" # Default server deployment name
    namespace: "{{ argowf_namespace }}"
  register: server_deployment_status
  until: "server_deployment_status.resources is defined and server_deployment_status.resources | length > 0 and server_deployment_status.resources[0].status.availableReplicas is defined and server_deployment_status.resources[0].status.availableReplicas >= 1 and server_deployment_status.resources[0].status.updatedReplicas == server_deployment_status.resources[0].status.replicas"
  retries: 30 # ~5 minutes
  delay: 10
  tags: [platform, workflows, verify]

- name: Create Argo Workflows LoadBalancer service (when MetalLB enabled)
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: argo-workflows-server
        namespace: "{{ argowf_namespace }}"
        labels:
          app.kubernetes.io/component: server
          app.kubernetes.io/name: argo-workflows-server
        annotations:
          metallb.universe.tf/loadBalancerIPs: "192.168.1.205"
      spec:
        type: LoadBalancer
        ports:
        - port: 80
          targetPort: 2746
          protocol: TCP
          name: http
        selector:
          app.kubernetes.io/name: argo-workflows-server
  when: metallb_state is defined and metallb_state == 'present'
  tags: [platform, workflows, loadbalancer]

- name: Display Argo Workflows deployment status
  debug:
    msg:
      - "🎉 Argo Workflows {{ argowf_app_version }} deployment completed successfully!"
      - "🌐 Workflows UI (NodePort): http://{{ ansible_host | default('192.168.1.85') }}:{{ argowf_service_nodeport }}"
      - "🌐 Workflows UI (LoadBalancer): http://192.168.1.205 (when MetalLB enabled)"
      - "📁 Namespace: {{ argowf_namespace }}"
  tags: [platform, summary]
