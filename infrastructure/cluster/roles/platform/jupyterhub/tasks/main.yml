---
- name: Add JupyterHub Helm repository
  kubernetes.core.helm_repository:
    name: jupyterhub
    repo_url: https://hub.jupyter.org/helm-chart/
    kubeconfig: "{{ kubeconfig_path }}"
  retries: 3
  delay: 10
  tags: [platform, helm-repos]

- name: Create JupyterHub namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    name: "{{ jupyterhub_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  tags: [platform, namespace]

- name: Ensure jupyterhub-admin SealedSecret is applied
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    src: "{{ playbook_dir }}/../manifests/sealed-secrets/jupyterhub-admin.yaml"
  tags: [platform, jupyter, secrets]

- name: Ensure jupyterhub-minio SealedSecret is applied
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    src: "{{ playbook_dir }}/../manifests/sealed-secrets/jupyterhub/ml-platform-sealed-secret.yaml"
  tags: [platform, jupyter, secrets]

- name: Ensure jupyterhub-ghcr SealedSecret is applied
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    src: "{{ playbook_dir }}/../manifests/sealed-secrets/jupyterhub/ghcr-sealed-secret.yaml"
  tags: [platform, jupyter, secrets]

- name: Deploy JupyterHub
  kubernetes.core.helm:
    name: "{{ jupyterhub_name }}"
    chart_ref: "{{ jupyterhub_chart_ref }}"
    release_namespace: "{{ jupyterhub_namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: "{{ helm_wait_timeout }}"
    values:
      proxy:
        service:
          type: "{{ jupyterhub_service_type }}"
          nodePorts:
            http: "{{ jupyterhub_nodeport }}"
        chp:
          resources:
            requests:
              memory: 320Mi
              cpu: 0.2
            limits:
              memory: 320Mi
              cpu: 0.2
      hub:
        config:
          DummyAuthenticator:
            password: "{{ jupyterhub_password }}"
          JupyterHub:
            authenticator_class: "{{ jupyterhub_auth_type }}"
            admin_access: true
        resources:
          requests:
            memory: "{{ jupyterhub_hub_memory_request }}"
            cpu: "{{ jupyterhub_hub_cpu_request }}"
          limits:
            memory: "{{ jupyterhub_hub_memory_limit }}"
            cpu: "{{ jupyterhub_hub_cpu_limit }}"
        extraEnv:
          JUPYTER_ENABLE_LAB: "yes"
          JUPYTERHUB_ADMIN_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: jupyterhub-admin
                key: password
      singleuser:
        networkPolicy:
          enabled: false
        image:
          name: "{{ jupyterhub_image_name }}"
          tag: "{{ jupyterhub_image_tag }}"
        defaultUrl: "{{ jupyterhub_default_url }}"
        storage:
          type: "{{ jupyterhub_storage_type }}"
          capacity: "{{ jupyterhub_storage_size }}"
          dynamic:
            storageClass: "{{ jupyterhub_storage_class }}"
          extraVolumes:
            - name: shared-ml-data-pvc
              persistentVolumeClaim:
                claimName: shared-data-pvc
            - name: shared-ml-artifacts-pvc
              persistentVolumeClaim:
                claimName: shared-artifacts-pvc
          extraVolumeMounts:
            - name: shared-ml-data-pvc
              mountPath: /mnt/shared-data
            - name: shared-ml-artifacts-pvc
              mountPath: /mnt/shared-artifacts
        cpu:
          limit: "{{ jupyterhub_user_cpu_limit }}"
          guarantee: "{{ jupyterhub_user_cpu_request }}"
        memory:
          limit: "{{ jupyterhub_user_memory_limit }}"
          guarantee: "{{ jupyterhub_user_memory_request }}"
        extraEnv:
          MLFLOW_TRACKING_URI: "http://mlflow.mlflow.svc.cluster.local:5000"
          MINIO_ENDPOINT_URL: "http://minio.minio.svc.cluster.local:9000"
          AWS_ACCESS_KEY_ID:
            valueFrom:
              secretKeyRef:
                name: jupyterhub-minio
                key: AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY:
            valueFrom:
              secretKeyRef:
                name: jupyterhub-minio
                key: AWS_SECRET_ACCESS_KEY
          MLFLOW_TRACKING_USERNAME:
            valueFrom:
              secretKeyRef:
                name: jupyterhub-mlflow
                key: MLFLOW_TRACKING_USERNAME
          MLFLOW_TRACKING_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: jupyterhub-mlflow
                key: MLFLOW_TRACKING_PASSWORD
          MLFLOW_FLASK_SERVER_SECRET_KEY:
            valueFrom:
              secretKeyRef:
                name: jupyterhub-mlflow
                key: MLFLOW_FLASK_SERVER_SECRET_KEY
          GHCR_USERNAME:
            valueFrom:
              secretKeyRef:
                name: jupyterhub-ghcr
                key: .dockerconfigjson
        lifecycleHooks:
          postStart:
            exec:
              command:
                - "bash"
                - "-c"
                - |
                  pip install --quiet mlflow boto3 scikit-learn pandas numpy matplotlib seaborn

      scheduling:
        userScheduler:
          enabled: true
        podPriority:
          enabled: true
        userPlaceholder:
          enabled: true
          replicas: 1
  register: jupyterhub_deployment
  retries: "{{ helm_retries }}"
  delay: "{{ helm_retry_delay }}"
  tags: [platform, jupyter, helm-deploy]

- name: Wait for JupyterHub to be ready
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: apps/v1
    kind: Deployment
    name: hub
    namespace: "{{ jupyterhub_namespace }}"
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300
  tags: [platform, jupyter, verify]

- name: Create JupyterHub MLOps ConfigMap
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: mlops-config
        namespace: "{{ jupyterhub_namespace }}"
      data:
        mlflow_tracking_uri: "http://mlflow.mlflow.svc.cluster.local:5000"
        minio_endpoint: "http://minio.minio.svc.cluster.local:9000"
        startup_script: |
          #!/bin/bash
          echo "üöÄ MLOps Environment Setup"
          echo "üìä MLflow Tracking URI: $MLFLOW_TRACKING_URI"
          echo "üì¶ MinIO Endpoint: $MINIO_ENDPOINT_URL"
          echo "‚úÖ Ready for ML experiments!"
  tags: [platform, jupyter, config]

- name: Create JupyterHub LoadBalancer service (when MetalLB enabled)
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: jupyterhub
        namespace: "{{ jupyterhub_namespace }}"
        labels:
          app: jupyterhub
          component: proxy
        annotations:
          metallb.universe.tf/loadBalancerIPs: "192.168.1.206"
      spec:
        type: LoadBalancer
        ports:
        - port: 80
          targetPort: 8000
          protocol: TCP
          name: http
        selector:
          app: jupyterhub
          component: proxy
  when: metallb_state is defined and metallb_state == 'present'
  tags: [platform, jupyter, loadbalancer]

- name: Display JupyterHub deployment status
  debug:
    msg:
      - "üéâ JupyterHub deployment completed successfully!"
      - "üåê JupyterHub URL (NodePort): http://{{ ansible_host | default('192.168.1.85') }}:{{ jupyterhub_nodeport }}"
      - "üåê JupyterHub URL (LoadBalancer): http://192.168.1.206 (when MetalLB enabled)"
      - "üîë Login: Use any username with password '{{ jupyterhub_password }}'"
      - "üìÅ Namespace: {{ jupyterhub_namespace }}"
      - "üê≥ User Image: {{ jupyterhub_image_name }}:{{ jupyterhub_image_tag }}"
      - ""
      - "üß™ MLOps Integration:"
      - "- MLflow Tracking: $MLFLOW_TRACKING_URI"
      - "- MinIO Storage: $MINIO_ENDPOINT_URL"
      - "- Pre-installed: mlflow, boto3, scikit-learn, pandas"
      - ""
      - "üí° Quick Start:"
      - "1. Navigate to {{ ansible_host | default('192.168.1.85') }}:{{ jupyterhub_nodeport }} or http://192.168.1.206"
      - "2. Login with any username and password '{{ jupyterhub_password }}'"
      - "3. Start your ML experiments!"
  tags: [platform, summary]
