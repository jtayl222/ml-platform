---
- name: Create directory for kubeconfig
  ansible.builtin.file:
    path: "{{ kubeconfig_dir }}"  # Use the variable from common.yml
    state: directory
    mode: "0700"
  delegate_to: localhost

- name: Check if k3s.yaml exists on control plane
  ansible.builtin.stat:
    path: "{{ k3s_server_path }}"
  register: k3s_stat
  delegate_to: "{{ control_plane_host }}"
  become: true

- name: Show k3s.yaml status
  ansible.builtin.debug:
    msg: "K3s.yaml exists on {{ control_plane_host }}: {{ k3s_stat.stat.exists | default(false) }}"
  delegate_to: localhost

- name: Fetch kubeconfig using become (sudo)
  ansible.builtin.fetch:
    src: "{{ k3s_server_path }}"
    dest: "{{ kubeconfig_path }}"
    flat: yes
    mode: "0600"
  become: true
  register: direct_copy
  ignore_errors: true

- name: Check if direct copy was successful
  ansible.builtin.stat:
    path: "{{ kubeconfig_path }}"
  register: direct_copy_stat
  delegate_to: localhost

- name: Report direct copy status
  ansible.builtin.debug:
    msg: "Direct copy successful: {{ direct_copy_stat.stat.exists | default(false) }}"

- name: Update kubeconfig to use external IP (after direct copy)
  ansible.builtin.replace:
    path: "{{ kubeconfig_path }}"
    regexp: 'https://127.0.0.1:6443'
    replace: 'https://{{ hostvars[control_plane_host].ansible_host }}:6443'
  delegate_to: localhost
  when:
    - direct_copy_stat.stat.exists | default(false)

- name: Test kubectl connectivity after kubeconfig fetch
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    kubeconfig: "{{ kubeconfig_path }}"
  register: kubectl_test
  failed_when: false

- name: Display kubectl test results
  debug:
    msg:
      - "kubectl connectivity test: {{ 'SUCCESS' if kubectl_test.failed == false else 'FAILED' }}"
      - "Nodes found: {{ kubectl_test.resources | length if kubectl_test.resources is defined else 'None' }}"
      - "Error: {{ kubectl_test.msg if kubectl_test.failed else 'None' }}"

- name: Delete local kubeconfig when uninstalling K3s
  ansible.builtin.file:
    path: "{{ kubeconfig_path }}"
    state: absent
  delegate_to: localhost
  become: false
  when: k3s_state == 'absent'
