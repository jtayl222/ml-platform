---
- name: TEST - Role is executing
  ansible.builtin.debug:
    msg: "K3s Control Plane role is running with k3s_state={{ k3s_state | default('undefined') }}"
  tags: [always]

- name: Debug k3s_state variable (workers)
  ansible.builtin.debug:
    msg: 
      - "k3s_state is: {{ k3s_state | default('undefined') }}"
      - "k3s_state is defined: {{ k3s_state is defined }}"
      - "k3s_state == 'absent': {{ k3s_state is defined and k3s_state == 'absent' }}"
      - "Should run deployment: {{ k3s_state is not defined or k3s_state != 'absent' }}"
      - "Should run removal: {{ k3s_state is defined and k3s_state == 'absent' }}"

- name: Deploy K3s Workers
  block:
    - name: Set control plane endpoint fact
      ansible.builtin.set_fact:
        k3s_control_plane_endpoint: "{{ groups['k3s_control_plane'][0] }}"
      when: k3s_state == 'present'

    - name: Fetch k3s token from control node
      ansible.builtin.slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: node_token_b64
      delegate_to: "{{ k3s_control_plane_endpoint }}"
      when: k3s_state == 'present'
      ignore_errors: "{{ k3s_state == 'absent' }}"

    - name: Set k3s token fact
      ansible.builtin.set_fact:
        k3s_token: "{{ node_token_b64['content'] | b64decode | trim }}"
      when: k3s_state == 'present' and node_token_b64 is defined and node_token_b64.content is defined

    - name: Get control node IP
      ansible.builtin.set_fact:
        k3s_control_plane_endpoint_ip:
          "{{
            hostvars[k3s_control_plane_endpoint]['ansible_host'] |
            default(hostvars[k3s_control_plane_endpoint]['ansible_default_ipv4']['address'])
          }}"
      when: k3s_state == 'present'

    - name: Install prerequisites
      ansible.builtin.apt:
        name:
          - curl
          - apt-transport-https
        state: present
        update_cache: yes
      when: k3s_state == 'present'

    - name: Install networking diagnostic utilities
      ansible.builtin.apt:
        name:
          - net-tools
          - netcat-openbsd
          - curl
          - traceroute
          - iproute2
          - iputils-ping
          - dnsutils
        state: present
        update_cache: yes
      become: true
      when: k3s_state == 'present'

    - name: Download k3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: /tmp/k3s-install.sh
        mode: "0755"
      become: true
      when: k3s_state == 'present'

    - name: Create K3s config directory on workers
      file:
        path: /etc/rancher/k3s
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags: [k3s, registry, harbor]
      when: k3s_state == 'present'

    - name: Configure Harbor registry for K3s workers
      template:
        src: ../../k3s_control_plane/templates/registries.yaml.j2
        dest: /etc/rancher/k3s/registries.yaml
        owner: root
        group: root
        mode: '0644'
      when: k3s_state == 'present' and harbor_loadbalancer_ip is defined
      tags: [k3s, registry, harbor]

    - name: Install k3s worker
      ansible.builtin.shell: |
        export K3S_URL="https://{{ k3s_control_plane_endpoint_ip }}:6443"
        export K3S_TOKEN="{{ k3s_token }}"
        /tmp/k3s-install.sh
      args:
        creates: /usr/local/bin/k3s
        executable: /bin/bash
      become: true
      when: k3s_state == 'present'

    - name: Ensure k3s service is enabled and started
      ansible.builtin.systemd:
        name: k3s-agent
        enabled: yes
        state: started
      become: true
      when: k3s_state == 'present'

    - name: Wait for node to register
      ansible.builtin.pause:
        seconds: 10
      when: k3s_state == 'present'

    - name: Label worker nodes for proper workload distribution
      ansible.builtin.command: kubectl label node {{ inventory_hostname | lower }} node-role.kubernetes.io/worker=worker --overwrite
      delegate_to: "{{ k3s_control_plane_endpoint }}"
      become: true
      when: k3s_state == 'present'
      ignore_errors: true
      tags: [k3s, workers, labels]

    - name: Verify k3s worker node status (from control plane)
      ansible.builtin.command: kubectl get nodes
      register: nodes_status
      delegate_to: "{{ k3s_control_plane_endpoint }}"
      become: true
      changed_when: false
      when: k3s_state == 'present'

    - name: Display nodes status
      ansible.builtin.debug:
        msg: "{{ nodes_status.stdout_lines }}"
      when: k3s_state == 'present' and nodes_status is defined

  when: k3s_state is not defined or k3s_state != "absent"
  tags: [k3s, workers]


- name: Remove K3s Workers
  block:
    - name: Stop K3s agent service
      ansible.builtin.systemd:
        name: k3s-agent
        state: stopped
        enabled: false
      ignore_errors: true

    - name: Run K3s agent uninstall script
      ansible.builtin.shell: /usr/local/bin/k3s-agent-uninstall.sh
      ignore_errors: true

    - name: Remove K3s binary
      ansible.builtin.file:
        path: /usr/local/bin/k3s
        state: absent

    - name: Clean up K3s directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/rancher/k3s
        - /var/lib/rancher/k3s
        - /var/lib/kubelet
        - /var/log/pods
        - /var/log/containers
      ignore_errors: true

  when: k3s_state is defined and k3s_state == "absent"
  tags: [k3s, workers]

